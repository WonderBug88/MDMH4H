import pandas as pd
import openpyxl


# Correct the file paths to use raw string literals or double backslashes
excel_file_path = r'C:\Users\juddu\OneDrive\Mission Critical Projects\Vendor Onboarding APP\Vendor Data Files (May not be updated)\Ganesh Mills Price Catalog Effective February 15,2024 in excel.xlsx'
mapping_file_path = r'C:\Users\juddu\OneDrive\Mission Critical Projects\GANESH MILLS ETLS SCRIPTS\ItemNumber Mapping.csv'
output_file_path = r'C:\Users\juddu\OneDrive\Mission Critical Projects\GaneshETL.csv'

excel_file = pd.ExcelFile(excel_file_path, engine='openpyxl')

def aggregate_product_details(sheet_df):
    products_list = []
    current_parent_product = None
    current_parent_details = {}

    for index, row in sheet_df.iterrows():
        # Check if any cell in the first 10 columns has a string in all uppercase letters
        # If so, it's a parent product. Convert all cells to strings before checking.
        if any(str(cell).isupper() and str(cell).isalpha() for cell in row.iloc[0:10] if pd.notnull(cell)):
            # Concatenate all string cells in the first 10 columns to get the parent product name
            current_parent_product = ' '.join(str(cell) for cell in row.iloc[0:10] if isinstance(cell, str) and not pd.isnull(cell))
            current_parent_details = {
                "Quality": row.get("Quality", ""),
                "Specs": row.get("Specs", ""),
                "Color": row.get("Color", ""),
                "Description": row.get("Description", "")
            }
        else:
            # If the row does not contain a parent product, check if it's not completely empty
            if not pd.isnull(row.iloc[0]) and current_parent_product:
                details = {
                    "Ganesh Mills Item No.": row.iloc[0],  # Assuming 'Ganesh Mills Item No.' is in the first column
                    "Parent Product": current_parent_product,
                    **current_parent_details,
                    "Short Description": row.iloc[1],  # Adjust the indices based on your actual data structure
                    "Size": row.iloc[2],
                    "Weight": row.iloc[3],
                    "Special Price": row.iloc[4],
                    "Unit": row.iloc[5],
                    "Case Qty": row.iloc[6],
                    "Bale / Carton": row.iloc[7],
                    "Dims LxWxH": row.iloc[8],
                    "Wt/Ctn": row.iloc[9]
                }
                products_list.append(details)

    # Create a DataFrame from the list of product details
    return pd.DataFrame(products_list)



# Apply the function to each sheet and concatenate the results
all_product_details = pd.DataFrame()
for sheet_name in excel_file.sheet_names:
    sheet_df = pd.read_excel(excel_file, sheet_name)
    # Call the function to process each sheet and directly concatenate the results
    all_product_details = pd.concat([all_product_details, aggregate_product_details(sheet_df)], ignore_index=True)

# Load the mapping file
mapping = pd.read_csv(mapping_file_path)
# Merge the processed details with the mapping
mappingjoined_df = pd.merge(all_product_details, mapping, left_on='Ganesh Mills Item No.', right_on='Ganesh Mills Item No.', how='left')

# Output the merged DataFrame to a CSV file
mappingjoined_df.to_csv(output_file_path, index=False)
